/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../common';

export interface SimpleFactoryInterface extends utils.Interface {
  functions: {
    'createToken(string,string,uint256,address)': FunctionFragment;
    'tokenCount()': FunctionFragment;
    'tokens(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: 'createToken' | 'tokenCount' | 'tokens'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'createToken',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'tokenCount',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'tokens',
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: 'createToken',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'tokenCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokens', data: BytesLike): Result;

  events: {
    'preDeploy(string)': EventFragment;
    'tokenCreated(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'preDeploy'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'tokenCreated'): EventFragment;
}

export interface preDeployEventObject {
  data: string;
}
export type preDeployEvent = TypedEvent<[string], preDeployEventObject>;

export type preDeployEventFilter = TypedEventFilter<preDeployEvent>;

export interface tokenCreatedEventObject {
  tokenAddress: string;
  owner: string;
}
export type tokenCreatedEvent = TypedEvent<
  [string, string],
  tokenCreatedEventObject
>;

export type tokenCreatedEventFilter = TypedEventFilter<tokenCreatedEvent>;

export interface SimpleFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SimpleFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createToken(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      totalSupply: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  createToken(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    totalSupply: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenCount(overrides?: CallOverrides): Promise<BigNumber>;

  tokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    createToken(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      totalSupply: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    'preDeploy(string)'(data?: null): preDeployEventFilter;
    preDeploy(data?: null): preDeployEventFilter;

    'tokenCreated(address,address)'(
      tokenAddress?: null,
      owner?: null
    ): tokenCreatedEventFilter;
    tokenCreated(tokenAddress?: null, owner?: null): tokenCreatedEventFilter;
  };

  estimateGas: {
    createToken(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      totalSupply: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createToken(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      totalSupply: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
