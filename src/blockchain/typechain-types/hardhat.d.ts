/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from 'ethers';
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from '@nomiclabs/hardhat-ethers/types';

import * as Contracts from '.';

declare module 'hardhat/types/runtime' {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: 'ERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: 'IERC20Metadata',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: 'IERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: 'ERC20Factory',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Factory__factory>;
    getContractFactory(
      name: 'SimpleFactory',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleFactory__factory>;
    getContractFactory(
      name: 'SimpleToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleToken__factory>;
    getContractFactory(
      name: 'USDCOV',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.USDCOV__factory>;

    getContractAt(
      name: 'ERC20',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: 'IERC20Metadata',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: 'IERC20',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: 'ERC20Factory',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Factory>;
    getContractAt(
      name: 'SimpleFactory',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleFactory>;
    getContractAt(
      name: 'SimpleToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleToken>;
    getContractAt(
      name: 'USDCOV',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.USDCOV>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
