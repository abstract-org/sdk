/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../common';
import type { USDCOV, USDCOVInterface } from '../../contracts/USDCOV';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_owner',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Transfer',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'balanceOf',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'burn',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'decimals',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'mint',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'name',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'symbol',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalSupply',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'transfer',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'transferFrom',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60806040526040518060400160405280600681526020017f555344434f560000000000000000000000000000000000000000000000000000815250600090805190602001906200005192919062000186565b506040518060400160405280600681526020017f555344434f560000000000000000000000000000000000000000000000000000815250600190805190602001906200009f92919062000186565b5064e8d4a510006002556012600360006101000a81548160ff021916908360ff160217905550348015620000d257600080fd5b5060405162001381380380620013818339818101604052810190620000f89190620002a0565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600254600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505062000337565b828054620001949062000301565b90600052602060002090601f016020900481019282620001b8576000855562000204565b82601f10620001d357805160ff191683800117855562000204565b8280016001018555821562000204579182015b8281111562000203578251825591602001919060010190620001e6565b5b50905062000213919062000217565b5090565b5b808211156200023257600081600090555060010162000218565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000268826200023b565b9050919050565b6200027a816200025b565b81146200028657600080fd5b50565b6000815190506200029a816200026f565b92915050565b600060208284031215620002b957620002b862000236565b5b6000620002c98482850162000289565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200031a57607f821691505b60208210811415620003315762000330620002d2565b5b50919050565b61103a80620003476000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806342966c681161006657806342966c681461015d57806370a082311461018d5780638da5cb5b146101bd57806395d89b41146101db578063a9059cbb146101f95761009e565b806306fdde03146100a357806318160ddd146100c157806323b872dd146100df578063313ce5671461010f57806340c10f191461012d575b600080fd5b6100ab610229565b6040516100b89190610aab565b60405180910390f35b6100c96102b7565b6040516100d69190610ae6565b60405180910390f35b6100f960048036038101906100f49190610b90565b6102bd565b6040516101069190610bfe565b60405180910390f35b610117610468565b6040516101249190610c35565b60405180910390f35b61014760048036038101906101429190610c50565b61047b565b6040516101549190610bfe565b60405180910390f35b61017760048036038101906101729190610c90565b61062f565b6040516101849190610bfe565b60405180910390f35b6101a760048036038101906101a29190610cbd565b61079c565b6040516101b49190610ae6565b60405180910390f35b6101c56107b4565b6040516101d29190610cf9565b60405180910390f35b6101e36107da565b6040516101f09190610aab565b60405180910390f35b610213600480360381019061020e9190610c50565b610868565b6040516102209190610bfe565b60405180910390f35b6000805461023690610d43565b80601f016020809104026020016040519081016040528092919081815260200182805461026290610d43565b80156102af5780601f10610284576101008083540402835291602001916102af565b820191906000526020600020905b81548152906001019060200180831161029257829003601f168201915b505050505081565b60025481565b6000808211801561030d5750600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211155b61034c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390610dc1565b60405180910390fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461039b9190610e10565b9250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103f19190610e44565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516104559190610ae6565b60405180910390a3600190509392505050565b600360009054906101000a900460ff1681565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461050d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050490610f0c565b60405180910390fd5b60008211610550576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054790610f78565b60405180910390fd5b81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461059f9190610e44565b9250508190555081600260008282546105b89190610e44565b925050819055508273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161061d9190610ae6565b60405180910390a36001905092915050565b6000808211801561067f5750600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211155b6106be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b590610fe4565b60405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461070d9190610e10565b9250508190555081600260008282546107269190610e10565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161078b9190610ae6565b60405180910390a360019050919050565b60046020528060005260406000206000915090505481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600180546107e790610d43565b80601f016020809104026020016040519081016040528092919081815260200182805461081390610d43565b80156108605780601f1061083557610100808354040283529160200191610860565b820191906000526020600020905b81548152906001019060200180831161084357829003601f168201915b505050505081565b600080821180156108b85750600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211155b6108f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ee90610dc1565b60405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109469190610e10565b9250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461099c9190610e44565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a009190610ae6565b60405180910390a36001905092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a4c578082015181840152602081019050610a31565b83811115610a5b576000848401525b50505050565b6000601f19601f8301169050919050565b6000610a7d82610a12565b610a878185610a1d565b9350610a97818560208601610a2e565b610aa081610a61565b840191505092915050565b60006020820190508181036000830152610ac58184610a72565b905092915050565b6000819050919050565b610ae081610acd565b82525050565b6000602082019050610afb6000830184610ad7565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b3182610b06565b9050919050565b610b4181610b26565b8114610b4c57600080fd5b50565b600081359050610b5e81610b38565b92915050565b610b6d81610acd565b8114610b7857600080fd5b50565b600081359050610b8a81610b64565b92915050565b600080600060608486031215610ba957610ba8610b01565b5b6000610bb786828701610b4f565b9350506020610bc886828701610b4f565b9250506040610bd986828701610b7b565b9150509250925092565b60008115159050919050565b610bf881610be3565b82525050565b6000602082019050610c136000830184610bef565b92915050565b600060ff82169050919050565b610c2f81610c19565b82525050565b6000602082019050610c4a6000830184610c26565b92915050565b60008060408385031215610c6757610c66610b01565b5b6000610c7585828601610b4f565b9250506020610c8685828601610b7b565b9150509250929050565b600060208284031215610ca657610ca5610b01565b5b6000610cb484828501610b7b565b91505092915050565b600060208284031215610cd357610cd2610b01565b5b6000610ce184828501610b4f565b91505092915050565b610cf381610b26565b82525050565b6000602082019050610d0e6000830184610cea565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610d5b57607f821691505b60208210811415610d6f57610d6e610d14565b5b50919050565b7f496e76616c696420616d6f756e7420746f207472616e73666572000000000000600082015250565b6000610dab601a83610a1d565b9150610db682610d75565b602082019050919050565b60006020820190508181036000830152610dda81610d9e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e1b82610acd565b9150610e2683610acd565b925082821015610e3957610e38610de1565b5b828203905092915050565b6000610e4f82610acd565b9150610e5a83610acd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e8f57610e8e610de1565b5b828201905092915050565b7f4f6e6c7920746865206f776e65722063616e20706572666f726d20746869732060008201527f616374696f6e0000000000000000000000000000000000000000000000000000602082015250565b6000610ef6602683610a1d565b9150610f0182610e9a565b604082019050919050565b60006020820190508181036000830152610f2581610ee9565b9050919050565b7f496e76616c696420616d6f756e7420746f206d696e7400000000000000000000600082015250565b6000610f62601683610a1d565b9150610f6d82610f2c565b602082019050919050565b60006020820190508181036000830152610f9181610f55565b9050919050565b7f496e76616c696420616d6f756e7420746f206275726e00000000000000000000600082015250565b6000610fce601683610a1d565b9150610fd982610f98565b602082019050919050565b60006020820190508181036000830152610ffd81610fc1565b905091905056fea264697066735822122088533e16c5602141493738dcd2a9d0dca7f4c07da15ba0d46bfc0339663d663764736f6c63430008090033';

type USDCOVConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: USDCOVConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class USDCOV__factory extends ContractFactory {
  constructor(...args: USDCOVConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<USDCOV> {
    return super.deploy(_owner, overrides || {}) as Promise<USDCOV>;
  }
  override getDeployTransaction(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_owner, overrides || {});
  }
  override attach(address: string): USDCOV {
    return super.attach(address) as USDCOV;
  }
  override connect(signer: Signer): USDCOV__factory {
    return super.connect(signer) as USDCOV__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): USDCOVInterface {
    return new utils.Interface(_abi) as USDCOVInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): USDCOV {
    return new Contract(address, _abi, signerOrProvider) as USDCOV;
  }
}
